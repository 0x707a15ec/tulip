
// todo in the future this should be something autogenerated with typescript type generation.

export interface Flow {
    _id: Id
    src_port: number
    dst_port: number
    src_ip: string
    dst_ip: string
    time: number
    duration: number
    inx: number
    starred: number
    contains_flag: boolean
    filename: string
}

export interface FullFlow extends Flow {
    flow: FlowData
}

export interface Id {
    $oid: string
}

export interface FlowData {
    from: string
    data: string
    hex: string
    time: number
}


// TODO pagination WTF
export interface FlowsQuery {
    // Text filter
    "flow.data"?: string;
    // Service filter
    // todo why not use service name here?
    dst_ip?: string;
    dst_port?: number;
    from_time?: string;
    to_time?: string;
    // todo should be bool
    starred?: number;
}

export type Service = {
    ip: string;
    port: number;
    name: string;
};



class TulipApi {
    private API_ENDPOINT = "http://127.0.0.1:5000";

    async getServices() {
        const response = await fetch(`${this.API_ENDPOINT}/services`);
        return (await response.json()) as Service[];
    }

    async getFlows(query: FlowsQuery) {
        // todo rename this endpoint
        const response = await fetch(`${this.API_ENDPOINT}/query`, {
            method: "POST",
            headers: {
                Accept: "application/json",
                "Content-Type": "application/json"
            },
            body: JSON.stringify(query),
        });
        return (await response.json()) as Flow[];
    }

    async getFlow(id: string) {
        const response = await fetch(`${this.API_ENDPOINT}/flow/${id}`);
        return (await response.json()) as FullFlow;
    }


    async starFlow(id: string, star: boolean) {
        const response = await fetch(`${this.API_ENDPOINT}/star/${id}/${star ? "1" : "0"}`);
        return await response.text()
    }
}

export const api = new TulipApi();