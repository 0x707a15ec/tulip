
// todo in the future this should be something autogenerated with typescript type generation.

export interface Flow {
    _id: Id
    src_port: number
    dst_port: number
    src_ip: string
    dst_ip: string
    time: number
    duration: number
    inx: number
    starred: number
    blocked: boolean
    tags: string[]
    suricata: number[]
    filename: string
}

export interface FullFlow extends Flow {
    signatures: Signature[]
    flow: FlowData[]
}

export interface Id {
    $oid: string
}

export interface FlowData {
    from: string
    data: string
    hex: string
    time: number
}

export interface Signature {
    _id: number
    msg: string
    action: string
}

// TODO pagination WTF
export interface FlowsQuery {
    // Text filter
    "flow.data"?: string;
    // Service filter
    // todo why not use service name here?
    dst_ip?: string;
    dst_port?: number;
    from_time?: string;
    to_time?: string;
    starred?: boolean;
    blocked?: boolean;
}

export type Service = {
    ip: string;
    port: number;
    name: string;
};



class TulipApi {
    private API_ENDPOINT = "/api";

    async getServices() {
        const response = await fetch(`${this.API_ENDPOINT}/services`);
        return (await response.json()) as Service[];
    }

    async getFlows(query: FlowsQuery) {
        // todo rename this endpoint
        const response = await fetch(`${this.API_ENDPOINT}/query`, {
            method: "POST",
            headers: {
                Accept: "application/json",
                "Content-Type": "application/json"
            },
            body: JSON.stringify(query),
        });
        return (await response.json()) as Flow[];
    }

    async getSignature(id: number) {
        const response = await fetch(`${this.API_ENDPOINT}/signature/${id}`);
        return (await response.json()) as Signature;
    }

    async getFlow(id: string) {
        const response = await fetch(`${this.API_ENDPOINT}/flow/${id}`);
        return (await response.json()) as FullFlow;
    }


    async starFlow(id: string, star: boolean) {
        const response = await fetch(`${this.API_ENDPOINT}/star/${id}/${star ? "1" : "0"}`);
        return await response.text()
    }

    async toPythonRequest(body: string, tokenize: boolean) {
        const response = await fetch(`${this.API_ENDPOINT}/to_python_request?tokenize=${tokenize ? "1" : "0"}`, {
            method: "POST",
            headers: {
                "Content-Type": "text/plain;charset=UTF-8"
            },
            body
        });
        return await response.text()
    }

    async toPwnTools(id: string) {
        const response = await fetch(`${this.API_ENDPOINT}/to_pwn/${id}`);
        return await response.text();
    }

}

export const api = new TulipApi();